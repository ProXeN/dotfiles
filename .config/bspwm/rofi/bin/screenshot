#!/usr/bin/env bash

## Copyright (C) 2020-2021 Aditya Shakya <adi1090x@gmail.com>
## Everyone is permitted to copy and distribute copies of this file under GNU-GPL3

DIR="$HOME/.config/bspwm"
rofi_command="rofi -theme $DIR/rofi/themes/screenshot.rasi"

time=`date +%Y-%m-%d-%I-%M-%S`
geometry=`xrandr | head -n1 | cut -d',' -f2 | tr -d '[:blank:],current'`
dir="`xdg-user-dir PICTURES`/Screenshots"
file="Screenshot_${time}_${geometry}.png"
RECORD_PIDFILE="/tmp/slip_record.pid"
VIDEOS="$HOME/Vídeos"

# Buttons
screen=""
flame=""
area=""
window=""
gif="𧻓"
video=""
vstop=""

# notify and view screenshot
notify_view () {
	dunstify -u low --replace=699 -i /usr/share/pr0x/icons/recordplay.svg "Copied to clipboard."
}

# countdown
countdown () {
	for sec in `seq $1 -1 1`; do
		dunstify -t 1000 --replace=699 -i /usr/share/pr0x/icons/clock.svg "Taking shot in : $sec"
		sleep 1
	done
}

# take shots
shotnow () {
	maim -u -f png | xclip -selection clipboard -t image/png
	notify_view
}

shot5 () {
	countdown '5'
	sleep 1 && maim -u -f png | xclip -selection clipboard -t image/png
	notify_view
}

shot10 () {
	countdown '10'
	sleep 1 && maim -u -f png | xclip -selection clipboard -t image/png
	notify_view
}

shotwin () {
	maim -u -f png -i `xdotool getactivewindow` | xclip -selection clipboard -t image/png
	notify_view
}

shotarea () {
	maim -u -f png -s -b 2 -c 0.35,0.55,0.85,0.25 -l | xclip -selection clipboard -t image/png
	notify_view
}

function slop_geom() {
	slop -f '%wx%h|%x,%y'
}

function video() {
	if [ "$1" = "gif" ]; then
		geometry=$(slop_geom)
		wxh=$(parse "geometryx" $geometry)
		off=$(parse "geometry+" $geometry)
		record "gif" "$wxh" "$off"
	elif [ "$1" = "video" ]; then
		geometry=$(slop_geom)
		wxh=$(parse "geometryx" $geometry)
		off=$(parse "geometry+" $geometry)
		record "video" "$wxh" "$off"
	elif [ "$1" = "stop" ]; then 
		local info
		info=$(cat "$RECORD_PIDFILE")
		stop_rec $info
		exit 0
	else
		exit 0
	fi
}

function record() {
	if [ "$1" = "gif" ]; then
		tmpfilename="/tmp/gif-`date +%Y-%m-%d-%H%M%S-tmp`.mkv"
		filename="$VIDEOS/gif-`date +%Y-%m-%d-%H%M%S`.gif"
		dunstify -u low --replace=70 -i "/usr/share/pr0x/icons/recordplay.svg" "Recording…"
		#Record
		ffmpeg -f x11grab -video_size "$2" -framerate 15 -i "$DISPLAY+$3" -loglevel quiet -c:v libx264 -preset ultrafast $tmpfilename &
		#Save info
		ratio=$(awk -F"x" '{ print int($1/$2) }' <<< "$2") # We only really need a binary answer. 
		if [ "$ratio" -ge 1 ]; then echo "$! gif $tmpfilename $filename 0" > "$RECORD_PIDFILE" 
		else echo "$! gif $tmpfilename $filename 1" > "$RECORD_PIDFILE" 
		fi
	elif [ "$1" = "video" ]; then
		filename="$VIDEOS/vid-'$time'.mkv"
		dunstify -u low --replace=70 -i "/usr/share/pr0x/icons/recordplay.svg" "Recording…"
		ffmpeg -f x11grab -video_size "$2" -framerate 60 -i "$DISPLAY+$3" -loglevel quiet -c:v libx264 -preset ultrafast $filename &
		echo "$! vid $filename" > "$RECORD_PIDFILE"
	fi
}

function parse() {
	if [ "$1" = "geometryx" ]; then
		awk -F"|" '{ print $1 }' <<< "$2"
	elif [ "$1" = "geometry+" ]; then
		awk -F"|" '{ print $2 }' <<< "$2"
	fi
}

function stop_rec() {
	local pid=$1
	local tfn=$3
	local fn=$4
	local pfn="${tfn}-palette.png"

	kill_ffmpeg "$pid"

	if [ "$2" = "gif" ]; then
		fn=$(convert_to_gif "$tfn" "$pfn" "$fn" "$5")
		size=$(du -k $fn | cut -f1)
	else
		dunstify -u low --replace=70 -i "/usr/share/pr0x/icons/recordstop.svg" "Saving…"
	fi
}

function kill_ffmpeg () {
	kill $1 || echo "Failed to kill ffmpeg, did it crash? Removing $RECORD_PIDFILE anyway."
	rm "$RECORD_PIDFILE"
}

function convert_to_gif () {
	local tfn=$1
	local pfn=$2
	local fn=$3
	local wh=$4

	local ratio
	
	if [ $wh -eg 0 ]; then
		ratio="640:-1"
	else
		ratio="-1:640"
	fi

	dunstify -u low --replace=70 -i "/usr/share/pr0x/icons/recordstop.svg" "Saving…"

	sleep 1 && ffmpeg -i "$tfn" -loglevel quiet -vf fps=15,scale="$ratio":flags=lanczos,palettegen "$pfn" &&
	ffmpeg -i "$tfn" -i "$pfn" -loglevel quiet -filter_complex "fps=15,scale=$ratio:flags=lanczos[x];[x][1:v]paletteuse" "$fn" &&

	echo "$fn"
}

# Variable passed to rofi
options="$screen\n$flame\n$area\n$window\n$gif\n$video\n$vstop"

chosen="$(echo -e "$options" | $rofi_command -p 'Take Screenshot' -dmenu -selected-row 0)"
case $chosen in
    $screen)
		shotnow
        ;;
    $flame)
		flameshot gui
        ;;
    $area)
		shotarea
        ;;
    $window)
		shotwin
		;;
    $gif)
		video "gif"
		;;
    $video)
		video "video"
		;;
    $vstop)
		video "stop"
        ;;
esac

